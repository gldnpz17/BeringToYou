// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PostgresDatabase;

namespace PostgresDatabase.Migrations
{
    [DbContext(typeof(PostgresAppDbContext))]
    [Migration("20210821134027_AddWhatsappContacts")]
    partial class AddWhatsappContacts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("DomainModel.Entities.AccountBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePictureFilename")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AccountBase");
                });

            modelBuilder.Entity("DomainModel.Entities.AdminPermissionPreset", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("CanManageAccounts")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanManageBackups")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanManageMap")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanManagePermissions")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanManageShops")
                        .HasColumnType("boolean");

                    b.HasKey("Name");

                    b.ToTable("PermissionPresets");
                });

            modelBuilder.Entity("DomainModel.Entities.AuthenticationToken", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Expired")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountId1");

                    b.ToTable("AuthenticationTokens");
                });

            modelBuilder.Entity("DomainModel.Entities.BackupCodeCredential", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BackupCodeAttemptMistakeClear")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("BackupCodeAttemptMistakeCounter")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BackupCodeAttemptTimeoutExpired")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("AccountId");

                    b.ToTable("BackupCodeCredentials");
                });

            modelBuilder.Entity("DomainModel.Entities.EmailVerificationToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Expired")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Token");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("EmailVerificationTokens");
                });

            modelBuilder.Entity("DomainModel.Entities.MapFloor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("KmlFilename")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FloorNumber")
                        .IsUnique();

                    b.ToTable("MapFloors");
                });

            modelBuilder.Entity("DomainModel.Entities.MapLegend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("IconFilename")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MapLegends");
                });

            modelBuilder.Entity("DomainModel.Entities.MapOverlay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("IconFilename")
                        .HasColumnType("text");

                    b.Property<string>("KmlFilename")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ZIndex")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MapOverlays");
                });

            modelBuilder.Entity("DomainModel.Entities.MerchantVerificationRequest", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Expired")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("AccountId");

                    b.ToTable("MerchantVerificationRequests");
                });

            modelBuilder.Entity("DomainModel.Entities.OnlineShopInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PlatformId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("ShopId");

                    b.ToTable("OnlineShopInstances");
                });

            modelBuilder.Entity("DomainModel.Entities.OnlineShopPlatform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("IconFilename")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OnlineShopPlatforms");
                });

            modelBuilder.Entity("DomainModel.Entities.PasswordCredential", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<DateTime>("PasswordAttemptMistakeClear")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PasswordAttemptMistakeCounter")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PasswordAttemptTimeoutExpired")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ResetAttemptMistakeClear")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ResetAttemptMistakeCounter")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ResetAttemptTimeoutExpired")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ResetToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("ResetTokenExpired")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.HasKey("AccountId");

                    b.ToTable("PasswordCredentials");
                });

            modelBuilder.Entity("DomainModel.Entities.PointOfInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("PointOfInterests");
                });

            modelBuilder.Entity("DomainModel.Entities.PointOfInterestCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("IconFilename")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PointOfInterestCategories");
                });

            modelBuilder.Entity("DomainModel.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("MaximumPrice")
                        .HasColumnType("integer");

                    b.Property<int>("MinimumPrice")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ShopId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DomainModel.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailFilename")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("DomainModel.Entities.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("LowercaseDescription")
                        .HasColumnType("text");

                    b.Property<string>("LowercaseName")
                        .HasColumnType("text");

                    b.Property<double>("MaxPrice")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("MerchantVerificationRequestAccountId")
                        .HasColumnType("uuid");

                    b.Property<double>("MinPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MerchantVerificationRequestAccountId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("DomainModel.Entities.ShopCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("IconFilename")
                        .HasColumnType("text");

                    b.Property<string>("LowercaseName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ShopCategories");
                });

            modelBuilder.Entity("DomainModel.Entities.ShopContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactIdentity")
                        .HasColumnType("text");

                    b.Property<string>("ContactUrl")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ShopContacts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ShopContact");
                });

            modelBuilder.Entity("DomainModel.Entities.ShopSubcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LowercaseName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RgbHexLegendColor")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("#FFFFFF");

                    b.Property<Guid?>("ShopCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ShopCategoryId");

                    b.HasIndex("ShopId");

                    b.ToTable("ShopSubcategories");
                });

            modelBuilder.Entity("DomainModel.Entities.TotpCredential", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("AesEncryptedSharedSecret")
                        .HasColumnType("text");

                    b.Property<string>("Base32EncodedInitializationVector")
                        .HasColumnType("text");

                    b.Property<DateTime>("VerificationTimeoutEnd")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("AccountId");

                    b.ToTable("TotpCredentials");
                });

            modelBuilder.Entity("MerchantAccountShop", b =>
                {
                    b.Property<Guid>("OwnedShopsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ShopOwnersId")
                        .HasColumnType("uuid");

                    b.HasKey("OwnedShopsId", "ShopOwnersId");

                    b.HasIndex("ShopOwnersId");

                    b.ToTable("MerchantAccountShop");
                });

            modelBuilder.Entity("DomainModel.Entities.AdminAccount", b =>
                {
                    b.HasBaseType("DomainModel.Entities.AccountBase");

                    b.Property<string>("PermissionsName")
                        .HasColumnType("text");

                    b.HasIndex("PermissionsName");

                    b.HasDiscriminator().HasValue("AdminAccount");
                });

            modelBuilder.Entity("DomainModel.Entities.MerchantAccount", b =>
                {
                    b.HasBaseType("DomainModel.Entities.AccountBase");

                    b.HasDiscriminator().HasValue("MerchantAccount");
                });

            modelBuilder.Entity("DomainModel.Entities.WhatsappShopContact", b =>
                {
                    b.HasBaseType("DomainModel.Entities.ShopContact");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("uuid");

                    b.HasIndex("ShopId");

                    b.HasDiscriminator().HasValue("WhatsappShopContact");
                });

            modelBuilder.Entity("DomainModel.Entities.AccountBase", b =>
                {
                    b.OwnsMany("DomainModel.ValueObjects.TwoFactorToken", "TwoFactorTokens", b1 =>
                        {
                            b1.Property<Guid>("AccountBaseId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<DateTime>("Expiry")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<string>("Token")
                                .HasColumnType("text");

                            b1.HasKey("AccountBaseId", "Id");

                            b1.ToTable("TwoFactorToken");

                            b1.WithOwner()
                                .HasForeignKey("AccountBaseId");
                        });

                    b.Navigation("TwoFactorTokens");
                });

            modelBuilder.Entity("DomainModel.Entities.AuthenticationToken", b =>
                {
                    b.HasOne("DomainModel.Entities.AccountBase", "Account")
                        .WithMany("AuthenticationTokens")
                        .HasForeignKey("AccountId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DomainModel.Entities.BackupCodeCredential", b =>
                {
                    b.HasOne("DomainModel.Entities.AccountBase", "Account")
                        .WithOne("BackupCodeCredential")
                        .HasForeignKey("DomainModel.Entities.BackupCodeCredential", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("DomainModel.ValueObjects.BackupCode", "BackupCodes", b1 =>
                        {
                            b1.Property<Guid>("BackupCodeCredentialAccountId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("HashedCode")
                                .HasColumnType("text");

                            b1.Property<string>("Salt")
                                .HasColumnType("text");

                            b1.HasKey("BackupCodeCredentialAccountId", "Id");

                            b1.ToTable("BackupCode");

                            b1.WithOwner()
                                .HasForeignKey("BackupCodeCredentialAccountId");
                        });

                    b.Navigation("Account");

                    b.Navigation("BackupCodes");
                });

            modelBuilder.Entity("DomainModel.Entities.EmailVerificationToken", b =>
                {
                    b.HasOne("DomainModel.Entities.AccountBase", "Account")
                        .WithOne("EmailVerificationToken")
                        .HasForeignKey("DomainModel.Entities.EmailVerificationToken", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DomainModel.Entities.MerchantVerificationRequest", b =>
                {
                    b.HasOne("DomainModel.Entities.MerchantAccount", "Account")
                        .WithOne("VerificationRequest")
                        .HasForeignKey("DomainModel.Entities.MerchantVerificationRequest", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("DomainModel.ValueObjects.MerchantVerificationPhoto", "VerificationPhotos", b1 =>
                        {
                            b1.Property<Guid>("MerchantVerificationRequestAccountId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("Filename")
                                .HasColumnType("text");

                            b1.HasKey("MerchantVerificationRequestAccountId", "Id");

                            b1.ToTable("MerchantVerificationPhoto");

                            b1.WithOwner()
                                .HasForeignKey("MerchantVerificationRequestAccountId");
                        });

                    b.Navigation("Account");

                    b.Navigation("VerificationPhotos");
                });

            modelBuilder.Entity("DomainModel.Entities.OnlineShopInstance", b =>
                {
                    b.HasOne("DomainModel.Entities.OnlineShopPlatform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId");

                    b.HasOne("DomainModel.Entities.Shop", "Shop")
                        .WithMany("OnlineShopInstances")
                        .HasForeignKey("ShopId");

                    b.Navigation("Platform");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("DomainModel.Entities.PasswordCredential", b =>
                {
                    b.HasOne("DomainModel.Entities.AccountBase", "Account")
                        .WithOne("PasswordCredential")
                        .HasForeignKey("DomainModel.Entities.PasswordCredential", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DomainModel.Entities.PointOfInterest", b =>
                {
                    b.HasOne("DomainModel.Entities.PointOfInterestCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DomainModel.Entities.Product", b =>
                {
                    b.HasOne("DomainModel.Entities.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("DomainModel.Entities.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopId");

                    b.OwnsMany("DomainModel.ValueObjects.ThumbnailedImage", "Images", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("Filename")
                                .HasColumnType("text");

                            b1.Property<string>("ThumbnailFilename")
                                .HasColumnType("text");

                            b1.HasKey("ProductId", "Id");

                            b1.ToTable("Products_Images");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("DomainModel.ValueObjects.ThumbnailedImage", "MainImage", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Filename")
                                .HasColumnType("text");

                            b1.Property<string>("ThumbnailFilename")
                                .HasColumnType("text");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Category");

                    b.Navigation("Images");

                    b.Navigation("MainImage");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("DomainModel.Entities.Shop", b =>
                {
                    b.HasOne("DomainModel.Entities.ShopCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("DomainModel.Entities.MerchantVerificationRequest", null)
                        .WithMany("OwnedShops")
                        .HasForeignKey("MerchantVerificationRequestAccountId");

                    b.OwnsOne("DomainModel.ValueObjects.ThumbnailedImage", "BannerImage", b1 =>
                        {
                            b1.Property<Guid>("ShopId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Filename")
                                .HasColumnType("text");

                            b1.Property<string>("ThumbnailFilename")
                                .HasColumnType("text");

                            b1.HasKey("ShopId");

                            b1.ToTable("Shops");

                            b1.WithOwner()
                                .HasForeignKey("ShopId");
                        });

                    b.Navigation("BannerImage");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DomainModel.Entities.ShopSubcategory", b =>
                {
                    b.HasOne("DomainModel.Entities.ShopCategory", "ShopCategory")
                        .WithMany("Subcategories")
                        .HasForeignKey("ShopCategoryId");

                    b.HasOne("DomainModel.Entities.Shop", null)
                        .WithMany("Subcategories")
                        .HasForeignKey("ShopId");

                    b.Navigation("ShopCategory");
                });

            modelBuilder.Entity("DomainModel.Entities.TotpCredential", b =>
                {
                    b.HasOne("DomainModel.Entities.AccountBase", "Account")
                        .WithOne("TotpCredential")
                        .HasForeignKey("DomainModel.Entities.TotpCredential", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MerchantAccountShop", b =>
                {
                    b.HasOne("DomainModel.Entities.Shop", null)
                        .WithMany()
                        .HasForeignKey("OwnedShopsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModel.Entities.MerchantAccount", null)
                        .WithMany()
                        .HasForeignKey("ShopOwnersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainModel.Entities.AdminAccount", b =>
                {
                    b.HasOne("DomainModel.Entities.AdminPermissionPreset", "Permissions")
                        .WithMany()
                        .HasForeignKey("PermissionsName");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("DomainModel.Entities.WhatsappShopContact", b =>
                {
                    b.HasOne("DomainModel.Entities.Shop", "Shop")
                        .WithMany("WhatsappContacts")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("DomainModel.Entities.AccountBase", b =>
                {
                    b.Navigation("AuthenticationTokens");

                    b.Navigation("BackupCodeCredential");

                    b.Navigation("EmailVerificationToken");

                    b.Navigation("PasswordCredential")
                        .IsRequired();

                    b.Navigation("TotpCredential");
                });

            modelBuilder.Entity("DomainModel.Entities.MerchantVerificationRequest", b =>
                {
                    b.Navigation("OwnedShops");
                });

            modelBuilder.Entity("DomainModel.Entities.Shop", b =>
                {
                    b.Navigation("OnlineShopInstances");

                    b.Navigation("Products");

                    b.Navigation("Subcategories");

                    b.Navigation("WhatsappContacts");
                });

            modelBuilder.Entity("DomainModel.Entities.ShopCategory", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("DomainModel.Entities.MerchantAccount", b =>
                {
                    b.Navigation("VerificationRequest");
                });
#pragma warning restore 612, 618
        }
    }
}
